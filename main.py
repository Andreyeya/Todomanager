import asyncio
import logging

import tortoise
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command

from config_reader import config
from database import init_db
from models import Task

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üìù ToDo Manager - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/add [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                         "/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                         "/done [ID] - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
                         "/delete [ID] - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                         "/help - –ø–æ–º–æ—â—å")


@dp.message(Command("help"))
async def cmd_answer(message: types.Message):
    await message.answer("üìù ToDo Manager - –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "/add [—Ç–µ–∫—Å—Ç] - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                         "/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                         "/done [ID] - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ\n"
                         "/delete [ID] - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                         "/help - –ø–æ–º–æ—â—å")


@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    task_text = message.text[5:].strip()
    if not task_text:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /add")

    task = await Task.create(
        user_id=message.from_user.id,
        text=str(task_text)
    )
    await message.answer(f'‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: "{task_text}" (ID: {task.id})')


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    tasks = await Task.filter(
        user_id=message.from_user.id
    ).order_by("is_completed", "-created_at")

    if not tasks:
        return await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")

    result = ["üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:"]
    for task in tasks:
        status = "‚úîÔ∏è" if task.is_completed else "‚óªÔ∏è"
        result.append(f"{status} {task.text} (ID: {task.id})")

    await message.answer("\n".join(result))


@dp.message(Command("done"))
async def cmd_done(message: types.Message):
    try:
        task_id = int(message.text[6:].strip())
    except ValueError:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /done")

    task = await Task.filter(
        id=task_id,
        user_id=message.from_user.id
    ).first()

    if not task:
        return await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    task.is_completed = True
    await task.save()
    await message.answer(f'‚úîÔ∏è –ó–∞–¥–∞—á–∞ "{task.text}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    try:
        task_id = int(message.text[8:].strip())
    except ValueError:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ /delete")

    task = await Task.filter(
        id=task_id,
        user_id=message.from_user.id
    ).first()

    if not task:
        return await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    await task.delete()
    await message.answer(f'üóëÔ∏è –ó–∞–¥–∞—á–∞ "{task.text}" —É–¥–∞–ª–µ–Ω–∞!')


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    tortoise.run_async(init_db())
    asyncio.run(main())
